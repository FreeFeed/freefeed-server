#!/usr/bin/env babel-node
import bluebird from 'bluebird';

global.Promise = bluebird;
global.Promise.onPossiblyUnhandledRejection((e) => { throw e; });

import { postgres, dbAdapter } from '../app/models'

async function main() {
  process.stdout.write(`Started\n`);

  await postgres.raw('truncate user_stats restart identity cascade');

  const userIds = await getAllUsersIds(postgres);

  const payloads = getStatsPayloads(userIds);
  await postgres('user_stats').insert(payloads);

  for (const id of userIds) {
    await dbAdapter.calculateUserStats(id);
  }
}

async function getAllUsersIds(db) {
  const res = await db('users').select('uid');
  return res.map((r) => r.uid);
}

function getStatsPayloads(userIds) {
  return userIds.map((user_id) => ({ user_id }));
}

main()
  .then(() => {
    process.stdout.write(`Finished\n`);
    process.exit(0);
  })
  .catch((e) => {
    process.stderr.write(e.message);
    process.exit(1);
  });
